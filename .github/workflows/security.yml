name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 3 AM UTC for dependency vulnerability scanning
    - cron: '0 3 * * *'

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-ghsas: GHSA-xxxx-xxxx-xxxx  # Allow specific advisories if needed
        comment-summary-in-pr: true

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Export requirements
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        poetry export -f requirements.txt --output requirements-dev.txt --without-hashes --with dev

    - name: Run Safety check on production dependencies
      run: |
        poetry run pip install safety
        poetry run safety check -r requirements.txt --json --output safety-prod.json || true

    - name: Run Safety check on development dependencies
      run: |
        poetry run safety check -r requirements-dev.txt --json --output safety-dev.json || true

    - name: Upload Safety results
      uses: actions/upload-artifact@v3
      with:
        name: safety-reports
        path: |
          safety-prod.json
          safety-dev.json

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto
        generateSarif: "1"

    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Check licenses
      run: |
        poetry run pip install pip-licenses
        poetry run pip-licenses --format=json --output-file=licenses.json
        poetry run pip-licenses --fail-on="GPL v3"  # Fail on copyleft licenses

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, secrets-scan, license-check]
    if: always()

    steps:
    - name: Security scan summary
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Vulnerability Scan | ${{ needs.vulnerability-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.vulnerability-scan.result }}" != "success" ] || \
           [ "${{ needs.secrets-scan.result }}" != "success" ] || \
           [ "${{ needs.license-check.result }}" != "success" ]; then
          echo "❌ One or more security checks failed"
          exit 1
        else
          echo "✅ All security checks passed"
        fi
