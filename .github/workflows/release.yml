name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Get version from tag or input
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "Using manual version: $VERSION"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Using tag version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Validate version matches pyproject.toml
      run: |
        PYPROJECT_VERSION=$(poetry version --short)
        RELEASE_VERSION="${{ steps.get-version.outputs.version }}"

        echo "pyproject.toml version: $PYPROJECT_VERSION"
        echo "Release version: $RELEASE_VERSION"

        if [ "$PYPROJECT_VERSION" != "$RELEASE_VERSION" ]; then
          echo "❌ Version mismatch between tag and pyproject.toml"
          echo "Please update pyproject.toml version to match the release tag"
          exit 1
        fi

        echo "✅ Version validation passed"

  test-release:
    name: Test Release Build
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run full test suite
      run: |
        poetry run pytest \
          --cov=injectipy \
          --cov-report=xml \
          --cov-fail-under=90 \
          -x -v

    - name: Test package build
      run: |
        poetry build

        # Test wheel installation in clean environment
        python -m pip install --upgrade pip
        pip install dist/*.whl

        # Test basic import
        python -c "import injectipy; print(f'Successfully imported injectipy {injectipy.__version__}')"

        # Test examples still work
        python -c "
        from injectipy import InjectipyStore, Inject, inject
        store = InjectipyStore()
        store.register_value('test', 'works')
        @inject
        def test_func(val=Inject['test']): return val
        assert test_func() == 'works'
        print('✅ Release package validation passed')
        "

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [validate-release, test-release]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: dist/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Consolidate artifacts
      run: |
        mkdir -p dist/
        find artifacts/ -name "*.whl" -o -name "*.tar.gz" | xargs cp -t dist/
        ls -la dist/

    - name: Set up Python for scripts
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install script dependencies
      run: |
        pip install toml

    - name: Generate release notes
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"

        # Try to generate from our release notes script
        if [ -f "scripts/release_notes_generator.py" ]; then
          echo "Generating release notes using automated script"
          python scripts/release_notes_generator.py "$VERSION" --template github --output release_notes.md
        else
          # Fallback to git log approach
          echo "Using fallback git log approach"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          CURRENT_TAG="v$VERSION"

          echo "Generating changelog from $PREV_TAG to $CURRENT_TAG"

          if [ -n "$PREV_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
          else
            CHANGES=$(git log --pretty=format:"- %s (%h)")
          fi

          # Create release notes
          cat > release_notes.md << EOF
        ## What's Changed

        $CHANGES

        ## Installation

        \`\`\`bash
        pip install injectipy==$VERSION
        \`\`\`

        ## Poetry

        \`\`\`bash
        poetry add injectipy==$VERSION
        \`\`\`

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$CURRENT_TAG
        EOF
        fi

        echo "changelog_file=release_notes.md" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: Release v${{ needs.validate-release.outputs.version }}
        body_path: ${{ steps.changelog.outputs.changelog_file }}
        files: dist/*
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    environment: release  # Use environment protection

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Build package
      run: poetry build

    - name: Publish to Test PyPI first
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_TOKEN }}
        poetry publish -r testpypi

    - name: Test installation from Test PyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ injectipy==${{ needs.validate-release.outputs.version }}
        python -c "import injectipy; print('Test PyPI installation successful')"

    - name: Publish to Production PyPI
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
        poetry publish

    - name: Verify PyPI publication
      run: |
        sleep 60  # Wait for package to be available
        pip install --upgrade injectipy==${{ needs.validate-release.outputs.version }}
        python -c "import injectipy; print(f'PyPI publication successful: {injectipy.__version__}')"

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version for development
      run: |
        # This could bump to next dev version
        echo "Release v${{ needs.validate-release.outputs.version }} completed successfully!"
        echo "Consider updating version for next development cycle"

    - name: Create release summary
      run: |
        echo "## 🎉 Release v${{ needs.validate-release.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Completed Tasks:" >> $GITHUB_STEP_SUMMARY
        echo "- Version validation" >> $GITHUB_STEP_SUMMARY
        echo "- Full test suite execution" >> $GITHUB_STEP_SUMMARY
        echo "- Multi-platform package building" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub release creation" >> $GITHUB_STEP_SUMMARY
        echo "- Test PyPI publication" >> $GITHUB_STEP_SUMMARY
        echo "- Production PyPI publication" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Package Information:" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI**: https://pypi.org/project/injectipy/${{ needs.validate-release.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📖 Installation:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install injectipy==${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
